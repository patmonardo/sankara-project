import { FormShape, FormMeta } from "../../schema/form";

/**
 * A graph entity (node)
 */
export interface GraphEntity {
  /** Unique identifier for this entity */
  id: string;
  /** Entity labels (types) */
  labels: string[];
  /** Entity properties */
  properties: Record<string, any>;
  /** Metadata about this entity */
  meta?: {
    /** Source of this entity */
    source?: string;
    /** When this entity was created */
    createdAt?: string;
    /** Original ID from source system */
    originalId?: string;
    /** Importance score (0-100) */
    importance?: number;
    /** Custom metadata */
    [key: string]: any;
  };
}

/**
 * A relationship between entities
 */
export interface GraphRelationship {
  /** Unique identifier for this relationship */
  id: string;
  /** Source entity ID */
  fromId: string;
  /** Target entity ID */
  toId: string;
  /** Relationship type */
  type: string;
  /** Relationship properties */
  properties: Record<string, any>;
  /** Metadata about this relationship */
  meta?: {
    /** Source of this relationship */
    source?: string;
    /** When this relationship was created */
    createdAt?: string;
    /** Strength of relationship (0-100) */
    strength?: number;
    /** Custom metadata */
    [key: string]: any;
  };
}

/**
 * Represents a form that has been transformed into a graph representation.
 * This is the output of FormToGraphSchemaMorph.
 */
export interface GraphShape extends FormShape {
  /** Entities in the graph */
  entities: GraphEntity[];

  /** Relationships in the graph */
  relationships: GraphRelationship[];

  /** Metadata specific to the graph */
  meta: FormMeta & {
    relationDefs?: FormRelationship[]; // Relationships defined in the form meta

    /** When the graph was generated */
    generatedAt?: string;

    /** Source morph that generated the graph */
    sourceMorph?: string;

    /** Prefix to use for node labels */
    labelPrefix?: string;

    /** Whether to include metadata properties like _formId, _createdAt */
    includeMetadata?: boolean;

    /** Number of entities in the graph */
    entityCount?: number;

    /** Number of relationships in the graph */
    relationshipCount?: number;

    /** Graph schema information */
    schema?: GraphSchema;

    /** Other graph-specific generation options */
    [key: string]: any;
  };
}

// --- Supporting Types (Can be refined or moved if not directly part of the core GraphShape) ---
/*
 * Defines a relationship originating from this form's node,
 * based on the value of a specific form field.
 * This definition resides within FormShape.meta.relationships.
 */
export interface FormRelationship {
  /** The form field containing the identifier(s) of the target node(s) */
  field: string;
  /** The type of the relationship (e.g., 'HAS_AUTHOR', 'BELONGS_TO') */
  type: string;
  /** The label of the target node (e.g., 'User', 'Category') */
  target: string;
  /** The direction of the relationship (default: OUTGOING) */
  direction?: "OUTGOING" | "INCOMING"; // Optional, default handled by logic
  /** The property on the target node to match against the field value (default: 'id') */
  targetProperty?: string; // Optional, default handled by logic
  /** Whether to create/merge the target node if it doesn't exist (default: false) */
  createTargets?: boolean; // Optional, default handled by logic
  /** Static properties to set on the relationship itself */
  properties?: Record<string, any>; // Using any for simplicity
}

/**
 * Graph schema information (potentially generated by a separate SchemaAnalysisMorph)
 */
export interface GraphSchema {
  /** Entity types (labels) */
  entityTypes: {
    label: string;
    properties: {
      name: string;
      type: string;
      required?: boolean;
      description?: string;
    }[];
  }[];
  /** Relationship types */
  relationshipTypes: {
    type: string;
    from: string[];
    to: string[];
    properties?: {
      name: string;
      type: string;
      required?: boolean;
      description?: string;
    }[];
  }[];
}

// --- Analysis & Visualization Types (Belong to separate morphs, keep here temporarily or move) ---

/**
 * Graph analysis results (Output of a GraphAnalysisMorph)
 */
export interface GraphAnalysis {
  metrics: {
    entityCounts: Record<string, number>;
    relationshipCounts: Record<string, number>;
    averageConnectivity: number;
    mostConnectedEntities: Array<{
      id: string;
      label: string;
      connectionCount: number;
    }>;
  };
  communities?: Array<{
    id: string;
    entityIds: string[];
    size: number;
    cohesion: number;
  }>;
  centrality?: {
    betweenness?: Record<string, number>;
    closeness?: Record<string, number>;
    eigenvector?: Record<string, number>;
  };
  paths?: {
    shortestPaths?: Array<{
      fromId: string;
      toId: string;
      length: number;
      pathEntityIds: string[];
      pathRelationshipIds: string[];
    }>;
  };
}

/**
 * Graph visualization data (Output of a GraphVisualizationMorph)
 */
export interface GraphVisualization {
  layout: string; // 'force', 'hierarchical', etc.
  positions: Record<string, { x: number; y: number }>;
  style: {
    entityStyles: Record<
      string,
      { color: string; size: number; icon?: string; shape?: string }
    >;
    relationshipStyles: Record<
      string,
      { color: string; width: number; dashed?: boolean; arrow?: string }
    >;
  };
  focusAreas?: Array<{
    name: string;
    entityIds: string[];
    highlight: boolean;
    zoom: number;
  }>;
}
